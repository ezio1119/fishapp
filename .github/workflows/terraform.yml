name: Apply Terraform

on:
  push:
    # branches:
    #   - master
    # paths:
    # - 'terraform/**'

env:
  GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
  GCP_REGION: asia-northeast1
  GCP_ZONE: asia-northeast1-a
  GCS_BUCKET_TF: ${{ secrets.GCS_BUCKET_TF }}
  GCS_PREFIX_TF: ${{ secrets.GCS_PREFIX_TF }}

jobs:
  apply-terraform:
    name: Apply terraform
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # - name: Generate credentials.json from secrets
    #   run: echo ${{ secrets.TF_SA_KEY }} | base64 -d | tee ./credentials.json >/dev/null

    - name: Apply terraform
      run: |
        docker run --rm --entrypoint "" -w /terraform \
        -v $PWD/terraform:/terraform \
        -e GOOGLE_CREDENTIALS=${{ secrets.TF_SA_KEY }} \
        hashicorp/terraform:light sh -c " \
        terraform init -backend-config='bucket=$GCS_BUCKET_TF' -backend-config='prefix=$GCS_PREFIX_TF' && \
        terraform plan -no-color -var 'project=$GCP_PROJECT' -var 'region=$GCP_REGION' -var 'location=$GCP_ZONE' "


# jobs:
#   apply-terraform:
#     name: Apply terraform
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         shell: bash
#         working-directory: terraform
#     steps:
#     - uses: actions/checkout@v2
#     - run: echo $GCS_BUCKET_TF
#     - uses: hashicorp/setup-terraform@v1
    
#     - name: Terraform fmt
#       id: fmt
#       run: terraform fmt
#       continue-on-error: true

#     - name: Terraform Init
#       id: init
#       run: terraform init -backend-config='bucket=$GCS_BUCKET_TF' -backend-config='prefix=$GCS_PREFIX_TF'
#       env:
#         GOOGLE_CREDENTIALS: ${{ secrets.TF_SA_KEY }}

#     - name: Terraform Validate
#       id: validate
#       run: terraform validate -no-color

#     - name: Terraform Plan
#       id: plan
#       run: terraform plan -no-color -var 'project=$GCP_PROJECT' -var 'region=$GCP_REGION' -var 'location=$GCP_ZONE'
#       continue-on-error: true
#       env:
#         GOOGLE_CREDENTIALS: ${{ secrets.TF_SA_KEY }}

#     # - uses: actions/github-script@0.9.0
#     #   if: github.event_name == 'pull_request'
#     #   env:
#     #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#     #   with:
#     #     github-token: ${{ secrets.GITHUB_TOKEN }}
#     #     script: |
#     #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#     #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#     #       #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
#     #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
#     #       <details><summary>Show Plan</summary>
          
#     #       \`\`\`${process.env.PLAN}\`\`\`
          
#     #       </details>
          
#     #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
#     #       github.issues.createComment({
#     #         issue_number: context.issue.number,
#     #         owner: context.repo.owner,
#     #         repo: context.repo.repo,
#     #         body: output
#     #       })